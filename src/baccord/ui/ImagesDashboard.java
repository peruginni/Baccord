
/*
 * ImagesDashboard.java
 *
 * Created on Mar 7, 2011, 4:05:47 PM
 */

package baccord.ui;

import baccord.BaccordApp;
import baccord.business.images.ImageFolders;
import baccord.business.search.ImageSearch;
import baccord.tools.DI;
import com.google.inject.Inject;
import java.io.File;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/**
 *
 * @author Ond≈ôej Macoszek <ondra@macoszek.cz>
 */
public class ImagesDashboard extends BaseUi
{
	@Inject private ImageFolders imageFolders;
	@Inject private ImageSearch imageSearch;
	
	/** Creates new form ImagesDashboard */
	public ImagesDashboard() 
	{
		initComponents();
	}
	
	@Override
	public void init()
	{	
		// loading folders list
		DefaultListModel foldersListModel = new DefaultListModel();
		for (String folder : imageFolders.getRecentlyUsed()) {
			foldersListModel.addElement(folder);
		}
		foldersList.setModel(foldersListModel);
		
		// loading keywords list
		DefaultListModel keywordsListModel = new DefaultListModel();
		for (String keyword : imageSearch.getRecentlyUsedKeywords()) {
			keywordsListModel.addElement(keyword);
		}
		keywordsList.setModel(keywordsListModel);
	}

	private void chooseKeyword(String keyword)
	{
		ImagesSearchQuery imagesSearchQuery = DI.get(ImagesSearchQuery.class);
		imagesSearchQuery.setDefaultKeyword(keyword);
		BaccordApp.getApplication().changeScreen(imagesSearchQuery);
	}

	private void chooseFolder(String folder)
	{
		if(!(new File(folder)).exists()) { 
			Dialog.error(this, "Folder does not exists. Please, pick different one.");
			return;
		}

		imageFolders.saveRecentlyUsed(folder);
		BaccordApp.getApplication().changeScreen(SfmSetup.class);
	}
	
	

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                downloadButton = new javax.swing.JButton();
                keywordsLabel = new javax.swing.JLabel();
                chooseFolderButton = new javax.swing.JButton();
                keywordsList = new javax.swing.JList();
                foldersList = new javax.swing.JList();
                foldersLabel = new javax.swing.JLabel();
                orLabel = new javax.swing.JLabel();

                setName("Form"); // NOI18N

                org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(baccord.BaccordApp.class).getContext().getResourceMap(ImagesDashboard.class);
                downloadButton.setText(resourceMap.getString("downloadButton.text")); // NOI18N
                downloadButton.setName("downloadButton"); // NOI18N
                downloadButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                downloadButtonActionPerformed(evt);
                        }
                });

                keywordsLabel.setBackground(resourceMap.getColor("sectionTitle.background")); // NOI18N
                keywordsLabel.setFont(resourceMap.getFont("sectionTitle.font")); // NOI18N
                keywordsLabel.setText(resourceMap.getString("keywordsLabel.text")); // NOI18N
                keywordsLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
                keywordsLabel.setName("keywordsLabel"); // NOI18N
                keywordsLabel.setOpaque(true);

                chooseFolderButton.setText(resourceMap.getString("chooseFolderButton.text")); // NOI18N
                chooseFolderButton.setName("chooseFolderButton"); // NOI18N
                chooseFolderButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chooseFolderButtonActionPerformed(evt);
                        }
                });

                keywordsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                keywordsList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                keywordsList.setName("keywordsList"); // NOI18N
                keywordsList.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                keywordsListMouseClicked(evt);
                        }
                });

                foldersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                foldersList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                foldersList.setName("foldersList"); // NOI18N
                foldersList.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                foldersListMouseClicked(evt);
                        }
                });

                foldersLabel.setBackground(resourceMap.getColor("sectionTitle.background")); // NOI18N
                foldersLabel.setFont(resourceMap.getFont("sectionTitle.font")); // NOI18N
                foldersLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                foldersLabel.setText(resourceMap.getString("foldersLabel.text")); // NOI18N
                foldersLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
                foldersLabel.setName("foldersLabel"); // NOI18N
                foldersLabel.setOpaque(true);

                orLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                orLabel.setText(resourceMap.getString("orLabel.text")); // NOI18N
                orLabel.setName("orLabel"); // NOI18N

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(keywordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                                                        .addComponent(downloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(orLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(keywordsList, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                                                .addGap(65, 65, 65)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(foldersList, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                        .addComponent(foldersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                        .addComponent(chooseFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(chooseFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                        .addComponent(orLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(keywordsLabel)
                                        .addComponent(foldersLabel))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(keywordsList, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                        .addComponent(foldersList, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents

    private void chooseFolderButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseFolderButtonActionPerformed
    {//GEN-HEADEREND:event_chooseFolderButtonActionPerformed
	    JFileChooser fileChooser = new JFileChooser();
	    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	    
	    if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
		   File selectedFolder = fileChooser.getSelectedFile();
		   try {
			chooseFolder(selectedFolder.getCanonicalPath());
		   } catch (IOException ex) {
			Dialog.error(this, "Error during getting canonical path for selected folder");
		   }
	    }
    }//GEN-LAST:event_chooseFolderButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_downloadButtonActionPerformed
    {//GEN-HEADEREND:event_downloadButtonActionPerformed
	    chooseKeyword("");
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void keywordsListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_keywordsListMouseClicked
    {//GEN-HEADEREND:event_keywordsListMouseClicked
	    String keyword = (String) keywordsList.getSelectedValue();
	    if(keyword != null) {
		    chooseKeyword(keyword);
	    }
    }//GEN-LAST:event_keywordsListMouseClicked

    private void foldersListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_foldersListMouseClicked
    {//GEN-HEADEREND:event_foldersListMouseClicked
	    String folder = (String) foldersList.getSelectedValue();
	    if(folder != null) {
		    chooseFolder(folder);
	    }
    }//GEN-LAST:event_foldersListMouseClicked

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton chooseFolderButton;
        private javax.swing.JButton downloadButton;
        private javax.swing.JLabel foldersLabel;
        private javax.swing.JList foldersList;
        private javax.swing.JLabel keywordsLabel;
        private javax.swing.JList keywordsList;
        private javax.swing.JLabel orLabel;
        // End of variables declaration//GEN-END:variables

}
